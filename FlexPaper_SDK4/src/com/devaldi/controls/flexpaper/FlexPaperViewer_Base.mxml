<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" 
		 height="100%" 
		 verticalGap="0" 
		 xmlns:fp="com.devaldi.controls.flexpaper.*" 
		 xmlns:ct="com.devaldi.controls.*" 
		 xmlns:st="com.devaldi.skinning.*" 
		 borderColor="#8a8a8a" 
		 
		 verticalScrollPolicy="off" 
		 horizontalScrollPolicy="off"
		 
		 addedToStage="bindStageEvents(event)"
		 creationComplete="Init()">
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			import mx.managers.PopUpManager;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import com.devaldi.events.CurrentPageChangedEvent;
			import com.devaldi.events.CursorModeChangedEvent;
			import com.devaldi.events.DocumentLoadedEvent;
			import com.devaldi.events.ExternalLinkClickedEvent;
			import com.devaldi.events.FitModeChangedEvent;
			import com.devaldi.events.ScaleChangedEvent;
			import com.devaldi.events.ViewModeChangedEvent;
			
			[Bindable]
			public var Scale:Number = 1;
			
			[Bindable]
			public var SwfFile:String = "";
			
			[Bindable]
			public var ZoomTransition:String = "easeOut";
			
			[Bindable]
			public var ZoomTime:Number = 0.6;
			
			[Bindable]
			public var ZoomInterval:Number = 0.1;
			
			[Bindable]
			public var FitPageOnLoad:Boolean = false;
			
			[Bindable]
			public var FitWidthOnLoad:Boolean = false;
			
			[Bindable]
			public var FullScreenAsMaxWindow:Boolean = false;
			
			[Bindable]
			public var ProgressiveLoading:Boolean = false;
			
			[Bindable]
			protected var TrueFullScreenActive:Boolean = false;
			
			[Bindable]
			public var StartAtPage:Number = 1;
			
			[Bindable]
			public var PrintEnabled:Boolean = true;
			
			[Bindable]
			public var PrintToolsVisible:Boolean = true;
			
			[Bindable]
			public var ViewModeToolsVisible:Boolean = true;
			
			[Bindable]
			public var ZoomToolsVisible:Boolean = true;
			
			[Bindable]
			public var FullScreenVisible:Boolean = true;
			
			[Bindable]
			public var NavToolsVisible:Boolean = true;
			
			[Bindable]
			public var CursorToolsVisible:Boolean = true;
			
			[Bindable]
			public var SearchToolsVisible:Boolean = true;
			
			private var _fixedWidth:Number = -1;
			private var _fixedHeight:Number = -1;
			private var prd:PrintRangeDialog;
			protected var _browserManager:IBrowserManager;

			public dynamic function get viewer():com.devaldi.controls.flexpaper.Viewer{return null;}
			
			private function Init():void{
				_browserManager = BrowserManager.getInstance();
			}	

			private function bindStageEvents(e:Event):void{
				stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
				this.addEventListener(MouseEvent.CLICK,setFocusTo);

				contextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();

				if(CursorToolsVisible){
					this.addEventListener(Event.COPY,copyHandler);
					contextMenu.clipboardMenu = true;
					contextMenu.clipboardItems.copy = true;
					contextMenu.clipboardItems.selectAll = false;
				}
				
				var cmi_about:ContextMenuItem = new ContextMenuItem(resourceManager.getString("FlexPaper", "About")+' FlexPaper');
				cmi_about.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showInfo);
				
				contextMenu.customItems.push(cmi_about);
				
				if(PrintEnabled && PrintToolsVisible){
					var cmi_print:ContextMenuItem = new ContextMenuItem(resourceManager.getString("FlexPaper", "Print") + " ...");
					cmi_print.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, printPaper);
					contextMenu.customItems.push(cmi_print);
				}
			}
			
			public function setViewerFocus():void{
				viewer.setPaperFocus();	
			}
			
			public function getCurrPage():Number{
				return viewer.currPage;
			}

			public function nextPage():void{
				return viewer.gotoPage(viewer.currPage+1);
			}		
			
			public function prevPage():void{
				return viewer.gotoPage(viewer.currPage-1);
			}
			
			public function get PluginList():Array{
				return viewer.PluginList;
			}
			
			public function set PluginList(p:Array):void{
				viewer.PluginList = p;
			}
			
			public function showInfo(e:Event):void {
				var vabout:About = new About();
				PopUpManager.addPopUp(vabout, this, true);
				PopUpManager.centerPopUp(vabout);
			}
			
			private function setFocusTo(e:MouseEvent):void{
				stage.stageFocusRect = false;
				stage.focus = e.target as InteractiveObject;
			}
			
			public function printPaper(e:Event):void{
				prd = new PrintRangeDialog(); 
				PopUpManager.addPopUp(prd, this, true);
				PopUpManager.centerPopUp(prd);
				prd["bttnPrint"].addEventListener("click", printHandler); 
			}
			
			protected function printHandler(event:Event):void{
				if(prd.PrintRange != "" && prd.validated){
					viewer.printPaperRange(prd.PrintRange);
				}else if(prd.validated){
					viewer.printPaper();
				}
			}
			
			private function fullScreenRedraw(event:FullScreenEvent):void{
				if(!event.fullScreen && _fixedWidth>0){
					viewer.setActualSize(_fixedWidth,_fixedHeight);
				}
				
				if(viewer.FitMode == FitModeEnum.FITWIDTH){
					flash.utils.setTimeout(viewer.fitWidth,200);
				} else if(viewer.FitMode == FitModeEnum.FITHEIGHT){
					flash.utils.setTimeout(viewer.fitHeight,200);
				} else if (viewer.ViewMode != ViewModeEnum.TWOPAGE){
					viewer.PaperVisible = true;
				}
				
				if(viewer.ViewMode == ViewModeEnum.TWOPAGE){
					if(event.fullScreen){
						flash.utils.setTimeout(viewer.reScaleTwoPage,200);
					}else{
						flash.utils.setTimeout(viewer.reScaleTwoPage,200,true);
					}
				}
				
				TrueFullScreenActive = event.fullScreen && !FullScreenAsMaxWindow;
			}
			
			private function copyHandler(e:Event):void{
				try{Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, viewer.CurrentlySelectedText);}catch (e:*) {}
			}
			
			protected function toggleFullScreen():void {
				try {
					if(!FullScreenAsMaxWindow){
						viewer.PaperVisible = false; // to avoid flickering and let it redraw properly
						
						if(this.stage.displayState == StageDisplayState.NORMAL){
							_fixedWidth = viewer.width;
							_fixedHeight = viewer.height;
						}
						
						switch (this.stage.displayState) {
							case StageDisplayState.FULL_SCREEN:
								this.stage.displayState = StageDisplayState.NORMAL;
								break;
							default:
								this.stage.displayState = StageDisplayState.FULL_SCREEN;
								break;
						}
					}else{
						var ur:URLRequest = new URLRequest(this.stage.loaderInfo.url);
						var uv:URLVariables = new URLVariables();
						uv.Scale = Scale;
						uv.SwfFile = SwfFile;
						uv.ZoomTransition = ZoomTransition;
						uv.ZoomTime = ZoomTime;
						uv.ZoomInterval = ZoomInterval;
						uv.FitPageOnLoad = viewer.FitMode == FitModeEnum.FITHEIGHT;
						uv.FitWidthOnLoad = viewer.FitMode == FitModeEnum.FITWIDTH;
						uv.PrintEnabled = PrintEnabled;
						uv.ProgressiveLoading = ProgressiveLoading;
						uv.FullScreenAsMaxWindow = FullScreenAsMaxWindow;
						uv.PrintToolsVisible = PrintToolsVisible;
						uv.ViewModeToolsVisible = ViewModeToolsVisible;
						uv.ZoomToolsVisible = ZoomToolsVisible;
						uv.FullScreenVisible = FullScreenVisible;
						uv.NavToolsVisible = NavToolsVisible;
						uv.CursorToolsVisible = CursorToolsVisible;
						uv.SearchToolsVisible = SearchToolsVisible;
						uv.localeChain = resourceManager.localeChain;
						ur.data = uv;
						navigateToURL(ur,"FlexPaperFullScreen");
					}
				} catch (err:SecurityError) {
					
				}
			}
			
			public function fitWidth():void{
				viewer.fitWidth();
			}
			
			public function fitHeight():void{
				viewer.fitHeight();
			}		
			
			public function gotoPage(p:Number):void{
				viewer.gotoPage(p);
			}
			
			protected function documentLoadedErrorHandler(event:Event):void{
				dispatchEvent(event);
			}
			
			protected function onFitModeChanged(event:FitModeChangedEvent):void{
				dispatchEvent(event);
			}
			
			protected function onViewModeChanged(event:ViewModeChangedEvent):void{
				dispatchEvent(event);
			}
			
			protected function onCurrPageChanged(event:CurrentPageChangedEvent):void{
				dispatchEvent(event);
			}
			
			protected function onCursorModeChanged(event:CursorModeChangedEvent):void{
				dispatchEvent(event);
			}
			
			protected function onExternalLinkClickedHandler(event:ExternalLinkClickedEvent):void{
				dispatchEvent(event);
			}
			
			protected function onDocumentLoadingProgressHandler(event:ProgressEvent):void{
				dispatchEvent(event);
			}
			
			protected function papersLoadingHandler(event:Event):void{
				dispatchEvent(event);
			}
			
			protected function documentLoadedHandler(event:Event):void{
				dispatchEvent(event);
			}	

			public function Zoom(factor:Number):void{
				viewer.Zoom(factor);
			}
			
			public function searchText(text:String):void{
				viewer.searchText(text);				
			}		
			
			public function switchMode(mode:String=null):void{
				viewer.switchMode(mode);
			}
			
			public function setCurrentCursor(cursor:String):void{
				if(cursor=="TextSelectorCursor"){
					viewer.TextSelectEnabled = true;
				}else if (cursor=="ArrowCursor"){
					viewer.TextSelectEnabled = false;
				}
			}
			
			protected function formatPct(item:Object):String {
				var spct:String = (Math.round(Number(item)*100)) + "%";
				return spct;
			}
			
			protected function mvNext():void{
				if(viewer.currPage<viewer.numPages){viewer.gotoPage(viewer.currPage+1);}
			}
			
			protected function mvPrev():void{
				if(viewer.ViewMode == ViewModeEnum.TWOPAGE){
					if(viewer.currPage>1){viewer.gotoPage(viewer.currPage-2);}
				}
				else
					if(viewer.currPage>1){viewer.gotoPage(viewer.currPage-1);}			
			}
			
			public dynamic function loadSwf(s:String):void{
				viewer.SwfFile = s;
			}
		]]>
	</mx:Script>
</mx:VBox>
