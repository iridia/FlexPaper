<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2009 Erik EngstrÃ¶m

This file is part of FlexPaper.

FlexPaper is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

FlexPaper is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FlexPaper.  If not, see <http://www.gnu.org/licenses/>.	
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" verticalGap="0"  xmlns:fp="com.devaldi.controls.flexpaper.*" xmlns:ct="com.devaldi.controls.*" xmlns:st="com.devaldi.skinning.*" borderColor="#8a8a8a" borderThickness="1" addedToStage="bindStageEvents(event)" creationComplete="Init()" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<mx:Metadata>
		[ResourceBundle("FlexPaper")]
		[Event(name="onDocumentLoaded", type="com.devaldi.events.DocumentLoadedEvent")]
		[Event(name="onLoadingProgress", type="flash.events.ProgressEvent")]
		[Event(name="onDocumentLoadedError", type="flash.events.ErrorEvent")]
		[Event(name="onCurrPageChanged", type="com.devaldi.events.CurrentPageChangedEvent")]
		[Event(name="onDocumentLoading", type="flash.events.Event")]
		[Event(name="onExternalLinkClicked", type="com.devaldi.events.ExternalLinkClickedEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.devaldi.events.CurrentPageChangedEvent;
			import com.devaldi.events.CursorModeChangedEvent;
			import com.devaldi.events.DocumentLoadedEvent;
			import com.devaldi.events.ExternalLinkClickedEvent;
			import com.devaldi.events.FitModeChangedEvent;
			import com.devaldi.events.ScaleChangedEvent;
			import com.devaldi.events.ViewModeChangedEvent;
			
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			import flash.display.StageDisplayState;
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.controls.sliderClasses.Slider;
			import mx.events.SliderEvent;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			
			import com.devaldi.controls.flexpaper.utils.MacMouseWheelHandler;
			
			[Bindable]
			public var Scale:Number = 1;
			
			[Bindable]
			public var SwfFile:String = "";
			
			[Bindable]
			public var ZoomTransition:String = "easeOut";
			
			[Bindable]
			public var ZoomTime:Number = 0.6;
			
			[Bindable]
			public var ZoomInterval:Number = 0.1;
			
			[Bindable]
			public var FitPageOnLoad:Boolean = false;
			
			[Bindable]
			public var FitWidthOnLoad:Boolean = false;
			
			[Bindable]
			public var FullScreenAsMaxWindow:Boolean = false;
			
			[Bindable]
			public var ProgressiveLoading:Boolean = false;
			
			[Bindable]
			private var TrueFullScreenActive:Boolean = false;
			
			[Bindable]
			public var StartAtPage:Number = 1;
			
			[Bindable]
			public var PrintEnabled:Boolean = true;
			
			[Bindable]
			public var PrintToolsVisible:Boolean = true;

			[Bindable]
			public var ViewModeToolsVisible:Boolean = true;
			
			[Bindable]
			public var ZoomToolsVisible:Boolean = true;

			[Bindable]
			public var FullScreenVisible:Boolean = true;
			
			[Bindable]
			public var NavToolsVisible:Boolean = true;
			
			[Bindable]
			public var CursorToolsVisible:Boolean = true;
			
			[Bindable]
			public var SearchToolsVisible:Boolean = true;
			
			private var prd:PrintRangeDialog;
			private var _fixedWidth:Number = -1;
			private var _fixedHeight:Number = -1;
			private var _browserManager:IBrowserManager;
			private var _sliderUserChange:Boolean = false;
			
			private function Init():void{
				_browserManager = BrowserManager.getInstance();
			}	
			
			public function printPaper(e:Event):void{
				prd = new PrintRangeDialog(); 
				PopUpManager.addPopUp(prd, this, true);
				PopUpManager.centerPopUp(prd);
				prd["bttnPrint"].addEventListener("click", printHandler); 
			}
			
			private function printHandler(event:Event):void{
				if(prd.PrintRange != "" && prd.validated){
					paper1.printPaperRange(prd.PrintRange);
				}else if(prd.validated){
					paper1.printPaper();
				}
			}
			
			public function setViewerFocus():void{
				paper1.setPaperFocus();	
			}
			
			public function getCurrPage():Number{
				return paper1.currPage;
			}
			
			public function nextPage():void{
				return paper1.gotoPage(paper1.currPage+1);
			}		
			
			public function prevPage():void{
				return paper1.gotoPage(paper1.currPage-1);
			}
			
			
			private function onNoMoreSearchResultsHandler(event:Event):void{
				Alert.show(resourceManager.getString("FlexPaper", "Finishedsearching"),resourceManager.getString("FlexPaper", "Searchfinished"),mx.controls.Alert.OK,this);
			}
			
			private function documentLoadedHandler(event:Event):void{
				spin1.visible = false;
				lblProgress.visible = false;
				spin1.stop();
				bttnInfo.visible = true;
				
				if(StartAtPage!=1&&!isNaN(StartAtPage)){paper1.gotoPage(StartAtPage);}
				dispatchEvent(event);
			}
			
			private function documentLoadedErrorHandler(event:Event):void{
				dispatchEvent(event);
			}
			
			private function logoClickedEventHandler(event:Event):void{
				showInfo(event);			
			}
			
			private function papersLoadingHandler(event:Event):void{
				spin1.start();
				spin1.visible = true;
				dispatchEvent(event);
			}
			
			private function onExternalLinkClickedHandler(event:ExternalLinkClickedEvent):void{
				dispatchEvent(event);
			}
			
			private function sliderChange(event:SliderEvent):void 
			{
				if(!paper1.BusyLoading && _sliderUserChange)
				{
					paper1.Zoom(Slider(event.currentTarget).value);
				}
				
				_sliderUserChange = true;
			}		
			
			private function formatPct(item:Object):String {
				var spct:String = (Math.round(Number(item)*100)) + "%";
				txtPct.text = spct;
				return spct;
			}
			
			private function txtPctKeyDown(event:KeyboardEvent):void{
				if(event.keyCode == Keyboard.ENTER && txtPct.text.length>1 && !isNaN(Number(txtPct.text.replace("%","")))){
					paper1.Zoom(new Number(txtPct.text.replace("%",""))/100);
				}
			}
			
			private function txtSearchKeyDown(event:KeyboardEvent):void{
				if(event!=null && event.keyCode == Keyboard.ENTER && txtSearch.text.length>0){
					paper1.searchText(txtSearch.text);
				}
			}
			
			
			private function txtPageNumKeyDown(event:KeyboardEvent):void{
				if(event.keyCode == Keyboard.ENTER && txtPage.text.length>0 && !isNaN(Number(txtPage.text))){
					paper1.gotoPage(new Number(txtPage.text));
				}
			}
			
			private function onDocumentLoadingProgressHandler(event:ProgressEvent):void{
				lblProgress.text = String(Math.round(event.bytesLoaded/event.bytesTotal*100));
				dispatchEvent(event);
			}
			
			private function onScaleChanged(event:Event):void{
				txtPct.text = formatPct(paper1.Scale);
				_sliderUserChange = false;
				slidPctScale.value = Number(paper1.Scale);
			}
			
			public function switchMode(mode:String=null):void{
				paper1.switchMode(mode);
			}
			
			public function setCurrentCursor(cursor:String):void{
				if(cursor=="TextSelectorCursor"){
					paper1.TextSelectEnabled = true;
				}else if (cursor=="ArrowCursor"){
					paper1.TextSelectEnabled = false;
				}
			}
			
			private function showInfo(e:Event):void {
				var vabout:About = new About();
				PopUpManager.addPopUp(vabout, this, true);
				PopUpManager.centerPopUp(vabout);
			}
			
			private function mvNext():void{
				if(paper1.currPage<paper1.numPages){paper1.gotoPage(paper1.currPage+1);}
			}
			
			private function mvPrev():void{
				if(paper1.ViewMode == ViewModeEnum.TWOPAGE){
					if(paper1.currPage>1){paper1.gotoPage(paper1.currPage-2);}
				}
				else
					if(paper1.currPage>1){paper1.gotoPage(paper1.currPage-1);}			
			}
			
			private function toggleFullScreen():void {
				try {
					if(!FullScreenAsMaxWindow){
						paper1.PaperVisible = false; // to avoid flickering and let it redraw properly
						
						if(this.stage.displayState == StageDisplayState.NORMAL){
							_fixedWidth = paper1.width;
							_fixedHeight = paper1.height;
						}
						
						switch (this.stage.displayState) {
							case StageDisplayState.FULL_SCREEN:
								this.stage.displayState = StageDisplayState.NORMAL;
								break;
							default:
								this.stage.displayState = StageDisplayState.FULL_SCREEN;
								break;
						}
					}else{
						var ur:URLRequest = new URLRequest(this.stage.loaderInfo.url);
						var uv:URLVariables = new URLVariables();
						uv.Scale = Scale;
						uv.SwfFile = SwfFile;
						uv.ZoomTransition = ZoomTransition;
						uv.ZoomTime = ZoomTime;
						uv.ZoomInterval = ZoomInterval;
						uv.FitPageOnLoad = paper1.FitMode == FitModeEnum.FITHEIGHT;
						uv.FitWidthOnLoad = paper1.FitMode == FitModeEnum.FITWIDTH;
						uv.PrintEnabled = PrintEnabled;
						uv.ProgressiveLoading = ProgressiveLoading;
						uv.FullScreenAsMaxWindow = FullScreenAsMaxWindow;
						uv.PrintToolsVisible = PrintToolsVisible;
						uv.ViewModeToolsVisible = ViewModeToolsVisible;
						uv.ZoomToolsVisible = ZoomToolsVisible;
						uv.FullScreenVisible = FullScreenVisible;
						uv.NavToolsVisible = NavToolsVisible;
						uv.CursorToolsVisible = CursorToolsVisible;
						uv.SearchToolsVisible = SearchToolsVisible;
						
						ur.data = uv;
						navigateToURL(ur,"FlexPaperFullScreen");
					}
				} catch (err:SecurityError) {
					
				}
			}
			
			public function fitWidth():void{
				paper1.fitWidth();
			}
			
			public function fitHeight():void{
				paper1.fitHeight();
			}		
			
			public function gotoPage(p:Number):void{
				paper1.gotoPage(p);
			}
			
			private function bindStageEvents(e:Event):void{
				stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);
				this.addEventListener(MouseEvent.CLICK,setFocusTo);
				
				if(CursorToolsVisible){
					this.addEventListener(Event.COPY,copyHandler);
					contextMenu = new ContextMenu();
					contextMenu.hideBuiltInItems();
					contextMenu.clipboardMenu = true;
					contextMenu.clipboardItems.copy = true;
					contextMenu.clipboardItems.selectAll = false;
				}
				
				var cmi_about:ContextMenuItem = new ContextMenuItem(resourceManager.getString("FlexPaper", "About")+' FlexPaper');
				cmi_about.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showInfo);
				
				contextMenu.customItems.push(cmi_about);
				
				if(PrintEnabled && PrintToolsVisible){
					var cmi_print:ContextMenuItem = new ContextMenuItem(resourceManager.getString("FlexPaper", "Print") + " ...");
					cmi_print.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, printPaper);
					contextMenu.customItems.push(cmi_print);
				}
				
			}
			
			private function setFocusTo(e:MouseEvent):void{
				stage.stageFocusRect = false;
				stage.focus = e.target as InteractiveObject;
			}
			
			private function copyHandler(e:Event):void{
				try{Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, paper1.CurrentlySelectedText);}catch (e:*) {}
			}
			
			private function fullScreenRedraw(event:FullScreenEvent):void{
				if(!event.fullScreen && _fixedWidth>0){
					paper1.setActualSize(_fixedWidth,_fixedHeight);
				}
				
				if(paper1.FitMode == FitModeEnum.FITWIDTH){
					flash.utils.setTimeout(paper1.fitWidth,200);
				} else if(paper1.FitMode == FitModeEnum.FITHEIGHT){
					flash.utils.setTimeout(paper1.fitHeight,200);
				} else if (paper1.ViewMode != ViewModeEnum.TWOPAGE){
					paper1.PaperVisible = true;
				}
				
				if(paper1.ViewMode == ViewModeEnum.TWOPAGE){
					if(event.fullScreen){
						flash.utils.setTimeout(paper1.reScaleTwoPage,200);
					}else{
						flash.utils.setTimeout(paper1.reScaleTwoPage,200,true);
					}
				}
				
				TrueFullScreenActive = event.fullScreen && !FullScreenAsMaxWindow;
				txtSearch.enabled = !TrueFullScreenActive; 
			}
			
			public function loadSwf(s:String):void{
				bttnInfo.visible = false;
				spin1.visible = true;
				lblProgress.text = "";
				lblProgress.visible = true;
				paper1.SwfFile = s;
			}
			
			public function Zoom(factor:Number):void{
				paper1.Zoom(factor);
			}
			
			public function searchText(text:String):void{
				paper1.searchText(text);				
			}		
			
			private function onFitModeChanged(event:FitModeChangedEvent):void{
				dispatchEvent(event);
			}
			
			private function onViewModeChanged(event:ViewModeChangedEvent):void{
				dispatchEvent(event);
			}
			
			private function onCurrPageChanged(event:CurrentPageChangedEvent):void{
				dispatchEvent(event);
			}
			
			private function onCursorModeChanged(event:CursorModeChangedEvent):void{
				dispatchEvent(event);
			}
			
		]]>
	</mx:Script>
	<mx:Style source="styles/default.css" />
	<mx:HBox styleName="toolbarBackground" width="100%" height="26" borderStyle="solid" verticalScrollPolicy="off" horizontalScrollPolicy="off" paddingTop="2" paddingLeft="2" horizontalGap="3">
		<st:GradientImageButton icon="@Embed('/../assets/print-icon.gif')" styleName="toolbttn" width="20" click="printPaper(event)" toolTip="@Resource(key='Print', bundle='FlexPaper')" enabled="{PrintEnabled}" visible="{PrintToolsVisible}" includeInLayout="{PrintToolsVisible}" />
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{PrintToolsVisible}" includeInLayout="{PrintToolsVisible}" />
		
		<st:GradientImageButton icon="@Embed('/../assets/singlepage.gif')" styleName="toolbttn" width="20" click="paper1.switchMode('Portrait');" toolTip="@Resource(key='SinglePage', bundle='FlexPaper')" selected="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" tabIndex="2" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		<st:GradientImageButton icon="@Embed('/../assets/twopage.gif')" styleName="toolbttn" width="20" click="paper1.switchMode('TwoPage');" toolTip="@Resource(key='TwoPage', bundle='FlexPaper')" selected="{paper1.ViewMode == ViewModeEnum.TWOPAGE}"  tabIndex="3" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		<st:GradientImageButton icon="@Embed('/../assets/thumbs.gif')" styleName="toolbttn" width="20" click="paper1.switchMode('Tile');" toolTip="@Resource(key='ThumbView', bundle='FlexPaper')" selected="{paper1.ViewMode == ViewModeEnum.TILE}" tabIndex="4" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		<st:GradientImageButton id="bttnFitWidth" icon="@Embed('/../assets/fit.gif')" styleName="toolbttn" width="20" selected="{paper1.FitMode == FitModeEnum.FITWIDTH}" toggle="true" click="paper1.fitWidth();bttnFitHeight.selected=false;" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" toolTip="@Resource(key='FitWidth', bundle='FlexPaper')"  tabIndex="5" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		<st:GradientImageButton id="bttnFitHeight" icon="@Embed('/../assets/pagefit.gif')" styleName="toolbttn" width="20"  click="paper1.fitHeight();bttnFitWidth.selected=false;" selected="{paper1.FitMode == FitModeEnum.FITHEIGHT}" toggle="true" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" toolTip="@Resource(key='FitPage', bundle='FlexPaper')"  tabIndex="6" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{ViewModeToolsVisible}" includeInLayout="{ViewModeToolsVisible}"/>
		
		<st:GradientHSlider id="slidPctScale" maximum="5" mouseDown="_sliderUserChange=true" change="sliderChange(event)"  styleName="sliderbttn" dataTipFormatFunction="formatPct" liveDragging="true" snapInterval="{ZoomInterval}" minimum="0.1" value="{Scale}" width="120" height="15" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" toolTip="@Resource(key='Scale', bundle='FlexPaper')" tabIndex="6" visible="{ZoomToolsVisible}" includeInLayout="{ZoomToolsVisible}"/>
		<st:GradientTextInput fontSize="9" height="21" width="40" id="txtPct" text="{formatPct(Scale)}" keyDown="txtPctKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT}" toolTip="@Resource(key='Scale', bundle='FlexPaper')" tabIndex="7" visible="{ZoomToolsVisible}" includeInLayout="{ZoomToolsVisible}"/>
		<st:GradientImageButton icon="@Embed('/../assets/fullscreen.gif')" styleName="toolbttn" toolTip="@Resource(key='Fullscreen', bundle='FlexPaper')"  width="20" height="20" x="312" y="2" click="toggleFullScreen();" tabIndex="8" visible="{FullScreenVisible}" includeInLayout="{FullScreenVisible}" />
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{FullScreenVisible||ZoomToolsVisible}" includeInLayout="{FullScreenVisible||ZoomToolsVisible}" />
		
		<st:GradientImageButton icon="@Embed('/../assets/icon-arrow-left.gif')" styleName="toolbttn" toolTip="@Resource(key='PreviousPage', bundle='FlexPaper')" width="15" height="20" click="mvPrev();" tabIndex="8" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}"/>
		<st:GradientTextInput fontSize="9" height="21" width="40" id="txtPage" text="{paper1.currPage}" keyDown="txtPageNumKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT || paper1.ViewMode == ViewModeEnum.TWOPAGE}" toolTip="@Resource(key='Current Page', bundle='FlexPaper')" tabIndex="9" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}"/>
		<mx:HBox horizontalGap="1" paddingTop="2" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}">
			<st:GradientLabel fontSize="9" height="21" width="10" text="/"/>
			<st:GradientLabel fontSize="9" height="21" width="33" text="{paper1.numPages}"/>
		</mx:HBox>
		<st:GradientImageButton icon="@Embed('/../assets/icon-arrow-right.gif')" styleName="toolbttn" toolTip="@Resource(key='NextPage', bundle='FlexPaper')"  width="15" height="20"  click="mvNext();" tabIndex="10" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}"/>
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{NavToolsVisible}" includeInLayout="{NavToolsVisible}" />
		
		<st:GradientImageButton icon="@Embed('/../assets/textselect.gif')" styleName="toolbttn" toolTip="@Resource(key='TextSelect', bundle='FlexPaper')"  width="20" selected="{paper1.TextSelectEnabled}" click="{paper1.TextSelectEnabled=true}" tabIndex="11" visible="{CursorToolsVisible}" includeInLayout="{CursorToolsVisible}"/>
		<st:GradientImageButton icon="@Embed('/../assets/hand2.gif')" styleName="toolbttn" toolTip="@Resource(key='TextDrag', bundle='FlexPaper')"  width="22" selected="{!paper1.TextSelectEnabled}"  click="{paper1.TextSelectEnabled=false}" tabIndex="12" visible="{CursorToolsVisible}" includeInLayout="{CursorToolsVisible}" />
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{CursorToolsVisible}" includeInLayout="{CursorToolsVisible}" />
		
		<st:GradientTextInput fontSize="9" height="20" width="65" id="txtSearch" keyDown="txtSearchKeyDown(event)" enabled="{paper1.ViewMode == ViewModeEnum.PORTRAIT || paper1.ViewMode == ViewModeEnum.TWOPAGE}" toolTip="@Resource(key='Search', bundle='FlexPaper')" tabIndex="13" visible="{SearchToolsVisible}" includeInLayout="{SearchToolsVisible}"/>
		<st:GradientImageButton icon="@Embed('/../assets/find.gif')" styleName="toolbttn" width="20" height="20" click="paper1.searchText(txtSearch.text);" toolTip="@Resource(key='Search', bundle='FlexPaper')" tabIndex="14" enabled="{!TrueFullScreenActive}" visible="{SearchToolsVisible}" includeInLayout="{SearchToolsVisible}"/>
		<mx:Image source="@Embed('/../assets/bar.gif')" width="3" height="21" visible="{SearchToolsVisible}" includeInLayout="{SearchToolsVisible}"/>
		
		<mx:Canvas width="100%" id="cnv_info" horizontalScrollPolicy="off" verticalScrollPolicy="off" height="100%">
			<st:GradientImageButton id="bttnInfo" left="{cnv_info.width-21}" visible="false" icon="@Embed('/../assets/logosmallgray.png')" styleName="toolbttn" width="20" height="20" click="showInfo(event);" toolTip="@Resource(key='About', bundle='FlexPaper')" />
			<st:GradientLabel id="lblProgress" left="{cnv_info.width-26}" textAlign="center" y="4" fontSize="8" height="19" width="32" text="" tabIndex="0"/>
			<ct:Spinner id="spin1" left="{cnv_info.width-22}" styleName="gradientlines" y="-1" startImmediately="false" spinnerType="gradientcircle" width="22" height="22"/>
		</mx:Canvas>
	</mx:HBox>
	<fp:Viewer id="paper1"	onDocumentLoaded="documentLoadedHandler(event)" 
			   onDocumentLoading="papersLoadingHandler(event)"
			   onDocumentLoadedError="documentLoadedErrorHandler(event)"
			   onLogoClicked="logoClickedEventHandler(event)"
			   
			   onNoMoreSearchResults="onNoMoreSearchResultsHandler(event)"
			   onLoadingProgress="onDocumentLoadingProgressHandler(event)"
			   onScaleChanged="onScaleChanged(event)"
			   onFitModeChanged="onFitModeChanged(event)"
			   onViewModeChanged="onViewModeChanged(event)"
			   onCurrPageChanged="onCurrPageChanged(event)"
			   onCursorModeChanged="onCursorModeChanged(event)"
			   onExternalLinkClicked="onExternalLinkClickedHandler(event)" 
			   
			   SwfFile="{SwfFile}" 
			   Scale="{Scale}" 
			   ZoomTransition="{ZoomTransition}" 
			   ZoomTime="{ZoomTime}"
			   FitPageOnLoad="{FitPageOnLoad}"
			   FitWidthOnLoad="{FitWidthOnLoad}"
			   ProgressiveLoading="{ProgressiveLoading}"
			   ZoomInterval="{ZoomInterval}"
			   addedToStage="MacMouseWheelHandler.init(stage)" 
			   height="100%" width="100%" borderStyle="solid"  tabIndex="0" />							
</mx:VBox>
